<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backend.dao.LogmanagementsystemMapper">
    <resultMap id="BaseResultMap" type="com.example.backend.po.Logmanagementsystem">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Tue Jan 10 10:53:47 CST 2023.
        -->
        <result column="timestamp" jdbcType="BIGINT" property="timestamp"/>
        <result column="date" jdbcType="TIMESTAMP" property="date"/>
        <result column="level" jdbcType="VARCHAR" property="level"/>
        <result column="appName" jdbcType="VARCHAR" property="appname"/>
        <result column="thread" jdbcType="VARCHAR" property="thread"/>
        <result column="class" jdbcType="VARCHAR" property="clazz"/>
        <result column="line" jdbcType="INTEGER" property="line"/>
        <result column="msg" jdbcType="VARCHAR" property="msg"/>
        <result column="stack_trace" jdbcType="VARCHAR" property="stackTrace"/>
        <result column="log" jdbcType="VARCHAR" property="log"/>
        <result column="container_id" jdbcType="VARCHAR" property="containerId"/>
        <result column="container_name" jdbcType="VARCHAR" property="containerName"/>
        <result column="source" jdbcType="VARCHAR" property="source"/>
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
    </resultMap>
    <resultMap id="CountMap" type="com.example.backend.po.CountItem">
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="numCount" jdbcType="INTEGER" property="count"/>
    </resultMap>
    <insert id="insert" parameterType="com.example.backend.po.Logmanagementsystem">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Tue Jan 10 10:53:47 CST 2023.
        -->
        insert into logManagementSystem (`timestamp`, `date`, `level`,
        appName, thread, class,
        line, msg, stack_trace,
        log, container_id, container_name,
        `source`, uuid)
        values (#{timestamp,jdbcType=BIGINT}, #{date,jdbcType=TIMESTAMP}, #{level,jdbcType=VARCHAR},
        #{appname,jdbcType=VARCHAR}, #{thread,jdbcType=VARCHAR}, #{class,jdbcType=VARCHAR},
        #{line,jdbcType=INTEGER}, #{msg,jdbcType=VARCHAR}, #{stackTrace,jdbcType=VARCHAR},
        #{log,jdbcType=VARCHAR}, #{containerId,jdbcType=VARCHAR}, #{containerName,jdbcType=VARCHAR},
        #{source,jdbcType=VARCHAR}, #{uuid,jdbcType=VARCHAR})
    </insert>
    <select id="selectAll" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Tue Jan 10 10:53:47 CST 2023.
        -->
        select `timestamp`, `date`, `level`, appName, thread, class, line, msg, stack_trace, log,
        container_id, container_name, `source`, uuid
        from logManagementSystem
    </select>
    <select id="selectTest" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where uuid = '9f78c6e0-2465-40fd-b39b-ae5d79443d03'
    </select>
    <select id="selectByUuid" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where uuid = #{uuid}
    </select>

    <select id="getEnumLevel" resultType="java.lang.String">
        select distinct `level`
        from logManagementSystem
    </select>
    <select id="getEnumAppName" resultType="java.lang.String">
        select distinct appName
        from logManagementSystem
    </select>
    <select id="getEnumContainerId" resultType="java.lang.String">
        select distinct container_id
        from logManagementSystem
    </select>
    <select id="getEnumContainerName" resultType="java.lang.String">
        select distinct container_name
        from logManagementSystem
    </select>
    <select id="getEnumSource" resultType="java.lang.String">
        select distinct `source`
        from logManagementSystem
    </select>
    <select id="getEnumClass" resultType="java.lang.String">
        select distinct `class`
        from logManagementSystem
    </select>

    <select id="getMinTimestamp" resultType="java.lang.Long">
        SELECT min(`timestamp`)
        from logManagementSystem
    </select>
    <select id="getMaxTimestamp" resultType="java.lang.Long">
        SELECT max(`timestamp`)
        from logManagementSystem
    </select>

    <select id="getCountTotalByAppName" resultMap="CountMap">
        SELECT appName as name, count(*) as numCount
        from logManagementSystem
        group by appName
        order by numCount desc
    </select>
    <select id="getCountTotalByContainerName" resultMap="CountMap">
        SELECT container_name as name, count(*) as numCount
        from logManagementSystem
        group by container_name
        order by numCount desc
    </select>
    <select id="getCountTotalByContainerId" resultMap="CountMap">
        SELECT container_id as name, count(*) as numCount
        from logManagementSystem
        group by container_id
        order by numCount desc
    </select>
    <select id="getCountTotalByLevel" resultMap="CountMap">
        SELECT `level` as name, count(*) as numCount
        from logManagementSystem
        group by `level`
        order by numCount desc
    </select>

    <select id="getCountLevelByAppName" resultMap="CountMap">
        SELECT `level` as name, count(*) as numCount
        from logManagementSystem
        where appName = #{appname}
        group by `level`
        order by numCount desc
    </select>
    <select id="getCountLevelByContainerId" resultMap="CountMap">
        SELECT `level` as name, count(*) as numCount
        from logManagementSystem
        where container_id = #{containerid}
        group by `level`
        order by numCount desc
    </select>
    <select id="getCountLevelByContainerName" resultMap="CountMap">
        SELECT `level` as name, count(*) as numCount
        from logManagementSystem
        where container_id = #{containername}
        group by `level`
        order by numCount desc
    </select>

    <select id="selectRange" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
        order by `timestamp` desc
    </select>
    <select id="selectRangeByAppName" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
          and appName = #{appname}
        order by `timestamp` desc
    </select>
    <select id="selectRangeByContainerId" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where `timestamp` >= #{start}
          and #{end} >= `timestamp`
          and appName = #{containerid}
        order by `timestamp` desc
    </select>
    <select id="selectRangeByContainerName" resultMap="BaseResultMap">
        select `timestamp`,
               `date`,
               `level`,
               appName,
               thread,
               class,
               line,
               msg,
               stack_trace,
               log,
               container_id,
               container_name,
               `source`,
               uuid
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
          and appName = #{containername}
        order by `timestamp` desc
    </select>
    <select id="selectRangeCount" resultType="java.lang.Integer">
        select count(*)
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
    </select>
    <select id="selectRangeByAppNameCount" resultType="java.lang.Integer">
        select count(*)
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
          and appName = #{appname}
    </select>
    <select id="selectRangeByContainerIdCount" resultType="java.lang.Integer">
        select count(*)
        from logManagementSystem
        where `timestamp` >= #{start}
          and #{end} >= `timestamp`
          and appName = #{containerid}
    </select>
    <select id="selectRangeByContainerNameCount" resultType="java.lang.Integer">
        select count(*)
        from logManagementSystem
        where `timestamp` > #{start}
          and #{end} > `timestamp`
          and appName = #{containername}
    </select>
</mapper>